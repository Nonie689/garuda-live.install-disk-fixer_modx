## Just the init Area!

####################################################################################################
#################################  To kill all simple run services #################################
####### kill $(ps -aux | grep -E "run-" | grep -v "grep" | awk '{print $2}') &> /dev/null    #######
####################################################################################################
# Set trap that we could quit correct with ctrl+c !!
trap 'exit 130' INT

# Set lange for programm outputs to US/UK-English to have an unified stout/sterr experience !!
version=0.97beta
LC_ALL=C
opensnitch=true
################################################

### expac "%n %m" -l'\n' -Q $(pacman -Qq) | sort -rhk 2 | head -40 | less   ## Shows the 40 biggest packages!

##########################
## Set init variables!! ##
##########################
###
# Some usefull variables

src_dir="$(dirname $(realpath $0))"
cachedir="$(realpath ~/.cache)"

### All archlinux packages that will grouped be touched or used!!

uninstall_conflicts="poppler wl-clipboard lib32-libelf libelf"
uninstall_oversized_pkgs="noto-fonts ttf-iosevka-nerd garuda-wallpapers libstaroffice ttf-fira-sans mesa-demos lib32-mesa-demos fwupd gnome-firmware"
extra_packages="xorg-xauth systemd-ui systemdgenie yt-dlp poppler poppler-glib repose pkgfile mate-utils qjournalctl gnome-logs yelp hwinfo usbview hwdetect pacmanlogviewer k3b vlc gparted wayfire-plugins-extra ncdu vnstat gotop tor shellcheck pikaur bat devtools opensnitch axel android-sdk-platform-tools irqbalance ripgrep"
pikaur_pkgs="go-dispatch-proxy-git redsocks hostapd-mana-git wl-clipboard-rs libelf"
aur_packages_1="libva-vdpau-driver-wayland" # libva-vdpau-driver-wayland -- set vlc to use xvideo output on native xwayland mode!
aur_packages_2="opera-proxy ix archtorify-git hotspot wvkbd"
need_package_install_from_repo="librewolf opera xorg-xhost shellcheck openssl openssl-1.1 libdrm wayland-protocols exa starship libgit2"
depends_pkg="proxychains-ng conky alacritty python-stem flatpak"
update_pkgs_early_stage="wayfire wf-config waybar wf-shell fmt spdlog wireplumber libwireplumber"


################################################

#########################
## Declare functions!! ##
#########################

function package_installed {
  for package in $@
  do
     pacman -Q $package 2> /dev/null | awk '{print $1}' 2> /dev/null
  done
}

function filter_just_new_packages {
  pkgs_list=$@

  for exclude in $(package_installed $@)
  do
     pkgs_list=$(echo $pkgs_list | sed -e "s/$exclude//g")
  done

  if [[ -n $pkgs_list ]]
  then
     echo $pkgs_list
  else
     false
  fi
}

function install_pkgs {
   pkgs_query_tmp=$(filter_just_new_packages $@)
   filter_just_new_packages $@ &> /dev/null && sudo pacman -S --noconfirm $pkgs_query_tmp
}

function ask {
   pkgs_query=$@
   while true
   do
   pkgs_filtered=$(filter_just_new_packages $pkgs_query)
   filter_just_new_packages $pkgs_query &> /dev/null || break
   printf "[))> Do you want to install not important packages: (yes/no)?\n\nPackages: $pkgs_filtered\n\n Install: (yes/no)? "
   read yn
      case $yn in
           yes|y ) echo; echo Packages will be installed! ;
                   install_pkgs $pkgs_filtered;
                   break ;;
           no|n ) echo "Abort installation!";break ;;
           * ) echo invalid response;
               echo;;
      esac
   done
}

function noask {
   sudo pacman -S $@ --noconfirm
}

function package_dep {
  expac %N $@
}

function install_with_dep_update {
  install_fresh $(package_dep $@) ; sudo pacman -S $@ --noconfirm 2> /dev/null
}

function package_old {
  for package in $@
 do
     pacman -Ss $package | grep -E "${packages} .*installed: " &>/dev/null && echo $package
  done
}


function aur_install {
  echo "==> Building and install: ${pikaur_pkgs} $@"
  echo
  sleep 0.25

  # Install packages and store packages that are complete to persistent storage
  pacman -Q hostapd &> /dev/null && sudo pacman -Rdd hostapd --noconfirm
  
  # Create local aur repo cache directory
  mkdir $src_dir/pacman-cache/aur &> /dev/null
  
  # Delete packages older then n days!
  find $src_dir/pacman-cache/aur/ -name *.zst -type f -mtime +14 | xargs rm -f
  
  cp $src_dir/pacman-cache/aur/* ~/.cache/pikaur/pkg/
  
  # install needet packages to install before build over the non dependencie related packages!!
  pikaur -S ${pikaur_pkgs} --noedit --noconfirm
  
  # Get pkgs to install with reading the parameter value
  pikaur -S $@ --noedit --noconfirm
  
  # Backup all new created aur packages to local aur cache folder!
  cp -r ~/.cache/pikaur/pkg/* $src_dir/pacman-cache/aur/
  
  ## Done!!
  
#  for aur_pkg in $@
#  do
#     if test -d $src_dir/pacman-cache/aur/cache/$aur_pkg
#     then
#        continue
#     fi
#     pacman -Q $aur_pkg &> /dev/null && continue
#     bash -c "cd $src_dir/pacman-cache/aur/cache && echo ==> Cloning: $aur_pkg && git clone https://aur.archlinux.org/${aur_pkg}.git 2> /dev/null && cd ${src_dir}/pacman-cache/aur/cache/${aur_pkg} && echo ==> Building: $aur_pkg && bash -c makepkg --cleanbuild --noconfirm" &> /dev/null &
#  done
#
#  sleep 3
#
#  while true
#  do
#    if test "$(jobs | grep -v -E 'makepkg --cleanbuild')"
#    then
#      break
#    fi
#    sleep 1
#  done
#
#  for aur_pkg in $@
#  do
#     pacman -Q $aur_pkg &> /dev/null && continue
#     cd ${src_dir}/pacman-cache/aur/cache/$aur_pkg && echo && echo "==> Install: $aur_pkg" && makepkg -i --noconfirm 2> /dev/null 3> /dev/null
#  done
#
  echo
  echo "[))> Finish all AUR package building!!"
  echo
}

function uninstall_existing {
  pkgs_list="$(package_installed $@)"
  if [[ -n $pkgs_list ]]
  then
     sudo pacman -Rdd $pkgs_list --noconfirm 2> /dev/null
  fi
}

function install_fresh {
  refresh_pkg_list="$(package_old $@)"
  if ! test -z "$refresh_pkg_list"
  then
     sudo pacman -S --noconfirm $refresh_pkg_list 2> /dev/null && echo
  fi
}



#########################################################################

#################################################
######### END OF INITIALIZE-STUFF AREA #########
###################################################

#########################################################################

echo
echo "[))> garuda-LiveCD ModX fixer tool!!  -- version ${version}"

sleep 1.6

#test -e pacman-cache.qcow2 || qemu-img create -f qcow2 ${src_dir}/pacman-cache.qcow2 40G || qemu-img create -f qed pacman-cache.qed 40G

#virsh attach-disk pacman-cache --source ${src_dir}/vdisk1 --target vdc --driver qemu

cd $src_dir

# Insert logx entry
echo " --- Garuda CD startet on: $(uptime | awk '{print $1'}) --- LiveMODX Tool started at: $(date '+//=>> on %A ::: %Y.%m.%d - %H:%M :::')" >> $src_dir/log/pacman.log
echo " --- Garuda CD startet on: $(uptime | awk '{print $1'}) --- LiveMODX Tool started at: $(date '+//=>> on %A ::: %Y.%m.%d - %H:%M :::')" >> $src_dir/log/garuda-live-cd_modx.log

## Run Systeem config custimizing tool and set a good and logical core configuration !!
bash $src_dir/configs_overwrite.bash

## Go to workdir cache!!
cd ~/.cache &> /dev/null

####################################################
## Init first update of repo when needet !!  #####
#################################################

ls firevigeo-torloader &>/dev/null || git clone https://github.com/Nonie689/firevigeo-torloader 2> /dev/null || true
ls firevigeo-torloader &> /dev/null && sudo ./firevigeo-torloader/firevigeo.sh -k &> /dev/null



#####################################################################################   ^ ^
##                                                                                   *       *
### ~>> Show the work steps that are we will want all to do !!!                   <<    (-)    >>
##                                                                                   *       *
##                                                                           ########   >V<
##############################################################################
#                                                                            #
#                                                                            #
                                                                             #
echo                                                                         #
echo "Tool will do these steps!!"                                            #
echo                                                                         #
echo "-------------------------------------------------------------   "      #
echo "-------------------------------------------------------------   "      #
echo "-----  1. ~> Install must have depences package!!  -----------  "      #
echo "-----  2. ~> Fix the bad garuda stuff!! --------------------    "      #
echo "-----  3. ~> Freshup the arch keyring database!! ------------   "      #
echo "-----  4. ~> Install Area: Install Browsers!! ------------      "      #
echo "-----  5. ~> Install other needet packages!! ------------       "      #
echo "-----  6. ~> Stop and start some systemd services!! -------     "      #
echo "-----  7. ~> Show good librewolf AddOns!! ---------------       "      #
echo "-----  8. ~> Install a long list of extra packages !! ------    "      #
echo "-----  9. ~> Clean local stored packages from cache !! ----     "      #
echo "----- 10. ~> Start firevigeo tor-proxy!! ---------------------- "      #
echo "----- 11. ~> Show some infos about usefull commands!! --------  "      #
echo "----- 12. ~> Tweak and hardening sudo configs !! ----------     "      #
echo "-------------------------------------------------------------   "      #
echo "-----------------------------------------------------------     "      #
                                                                             #
#                                                                            #
#                                                                            #
##############################################################################
                                                                            #################
sleep 2.75                                                                               ###############
sudo pacman -Sy                                                                                ##################################
sudo pacman -Q wl-clipboard-rs &> /dev/null || uninstall_existing $uninstall_conflicts $uninstall_oversized_pkgs  #######################
                                                                                                                       #################
############################################################################################################################

sudo mkdir -p  /usr/share/wallpapers/garuda-wallpapers/ &> /dev/null && sudo cp $src_dir/Ghosts.jpg /usr/share/wallpapers/garuda-wallpapers/Ghosts.jpg

## Install dependencies packages for tool to adjust garuda live disk correct!!

#############################################################################
## Remove bad garuda stuff and refresh keyrings by reinstall them!!         ####
# Just some not usefull and bad preinstalled packages!!                      ###############################################################
#                                                                                                                                    #############
### Maybe some crawler tools, deep unclear modding packages, bad garuda brand tools and stuff, maybe risky browser settings also!!            ################
#                                                                                                                                                   ###############
### Soooo it will delete!!
#############
##                                                                                                                                                                        ###########
                                                                                                                                                                            ###########
bash $src_dir/remove-unwanted-garuda-stuff.bash
###############

##########################

#######################
#######################################################################################################################################################################################
###################################################################################################################################################################
###################################################################################################################################################
############################################################################################
####                                                                   ############
## Refresh archlinux and chaotic keyring when they are outdated!!      #########
# See ~> update_pkgs_early_stage                                       ########
##########################################################################
######################################################################

bash $src_dir/refresh-keyrings.bash
install_fresh $update_pkgs_early_stage


#######################################
######################################
#######################################
######################################
##
####                           ####
########   [ MAIN-AREA ]   ########
####                           ####
##
#######################################
######################################
#######################################
######################################
####################################
#####


   ######################################
   #### Package install Area !!! #####
    #################################


########
######
#######

#####
    ## First install programm which are needet at early stage!!
    # See ~> need_package_install_from_repo
    ##
#####
pacman -Q librewolf &> /dev/null || noask $need_package_install_from_repo

## Second install all other usefull packages!!
# See ~> extra_packages
##
pacman -Q android-sdk-platform-tools &> /dev/null || noask ${extra_packages}

## Install dependens for use garuda as livecd!!
# See ~> depends_pkg
##

pacman -Q proxychains-ng &> /dev/null || noask ${depends_pkg}


##  Show librewolf usefull librewolf AddOns!!
#
pidof librewolf &> /dev/null || nohup librewolf 'https://addons.mozilla.org/en-US/firefox/addon/videospeed/' 'https://addons.mozilla.org/en-US/firefox/addon/youtube-recommended-videos/' 'https://addons.mozilla.org/en-US/firefox/addon/mediareload/' 'https://addons.mozilla.org/en-US/firefox/addon/videos-hls-m3u8-mp4-downloader/' 'https://addons.mozilla.org/en-US/firefox/addon/print-edit-we/' 'https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/' 'https://addons.mozilla.org/en-US/firefox/addon/temporary-containers/' 'https://addons.mozilla.org/en-US/firefox/addon/export-cookies-txt/' 'https://addons.mozilla.org/en-US/firefox/addon/i-dont-care-about-cookies/' 'https://addons.mozilla.org/en-US/firefox/addon/tranquility-1/' &> /dev/null &
pidof librewolf &> /dev/null || sleep 10 && nohup librewolf 'https://github.com/Nonie689/garuda-live.install-disk-fixer_modx/'  'about:addons' &> /dev/null &


## Install all Aur stored packages and requirements!
# See list ~> aur_packages_1  aur_packages_2 pikaur_pkgs
##

echo
echo

sleep 2

aur_install $aur_packages_1 $aur_packages_2 

# install wlroots-nvidia
cd ~/.cache
pikaur -Rdd wlroots --noconfirm
pikaur -G wlroots-nvidia
cd  wlroots-nvidia
cp $srcdir/pikaur-cache/wlroots-nvidia*zst ./ &> /dev/null
makepkg -si --skippgpcheck --noconfirm
cp .zst $srcdir/pikaur-cache/


##############################
### Stop systemd services!! #
############################

sudo modprobe zram
echo lz4 > sudo /sys/block/zram0/comp_algorithm

sudo systemctl stop avahi-daemon.socket &> /dev/null
sudo systemctl stop avahi-daemon.service &> /dev/null
sudo systemctl stop avahi-daemon.socket &> /dev/null
sudo systemctl stop mhwd-live.service &> /dev/null
sudo systemctl stop systemd-oomd.service &> /dev/null

############################
## Start systemd services #
##########################

sudo systemctl start modprobe@drm.service &> /dev/null
sudo systemctl enable --now vnstat 1> /dev/null
sudo systemctl start redsocks 1> /dev/null
sudo systemctl enable --now irqbalance 1> /dev/null
sudo systemctl start modprobe@configfs.service 1> /dev/null
sudo systemctl start systemd-zram-setup@zram0.service 1> /dev/null
sudo systemctl start udisks2-zram-setup@zram0.service 1> /dev/null

if $opensnitch
then
  sudo systemctl enable --now opensnitchd 1> /dev/null
fi

## Desktop gadget and workflow control will be established !!!

killall waybar &> /dev/null
killall wf-background &> /dev/null
killall mako &> /dev/null
killall wf-panel &> /dev/null

sleep 0.250

kill $(ps -aux | grep -E "bash $HOME/run-.*.sh" | grep -v grep | head --lines=-1 | awk '{ print $2}') &> /dev/null


for runscripts in ~/run-*
do
  echo "Starting: $runscripts"
  bash -c "$runscripts" &> /dev/null &
done

cd ~

sleep 0.750
disown $(jobs -l | grep -E "run-*.sh" | awk '{ print $2'})  && echo

sudo systemctl enable --now redsocks 1> /dev/null

sudo bash $src_dir/install_unimportant.bash


##################
#### Just go into the global ghostchip mode via tor that are loadbalanced!!
#######
## Show torprojec test site!!

bash -c "sleep 8 && nohup librewolf 'https://check.torproject.org'" &> /dev/null &

## At least show just some infos for usage at the!!

echo "[))> Run if you like to restart firevigeo:"
echo
echo "sudo ~/firevigeo -s"

echo
echo Finish building process!!
echo

sudo bash $src_dir/sudo-hardening-pro_tweaks.bash && sudo killall wayfire


#### !!!! END LINE ~>> HOPE ALL DONE WITHOUT FAILURES AND HOW DO YOU LIKE IT <<~ !!!! ####




